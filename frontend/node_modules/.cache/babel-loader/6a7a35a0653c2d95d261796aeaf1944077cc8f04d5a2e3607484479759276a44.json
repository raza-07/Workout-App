{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst types_1 = require(\"../discriminator/types\");\nconst compile_1 = require(\"../../compile\");\nconst ref_error_1 = require(\"../../compile/ref_error\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n  message: ({\n    params: {\n      discrError,\n      tagName\n    }\n  }) => discrError === types_1.DiscrError.Tag ? `tag \"${tagName}\" must be string` : `value of tag \"${tagName}\" must be in oneOf`,\n  params: ({\n    params: {\n      discrError,\n      tag,\n      tagName\n    }\n  }) => (0, codegen_1._)`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`\n};\nconst def = {\n  keyword: \"discriminator\",\n  type: \"object\",\n  schemaType: \"object\",\n  error,\n  code(cxt) {\n    const {\n      gen,\n      data,\n      schema,\n      parentSchema,\n      it\n    } = cxt;\n    const {\n      oneOf\n    } = parentSchema;\n    if (!it.opts.discriminator) {\n      throw new Error(\"discriminator: requires discriminator option\");\n    }\n    const tagName = schema.propertyName;\n    if (typeof tagName != \"string\") throw new Error(\"discriminator: requires propertyName\");\n    if (schema.mapping) throw new Error(\"discriminator: mapping is not supported\");\n    if (!oneOf) throw new Error(\"discriminator: requires oneOf keyword\");\n    const valid = gen.let(\"valid\", false);\n    const tag = gen.const(\"tag\", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName)}`);\n    gen.if((0, codegen_1._)`typeof ${tag} == \"string\"`, () => validateMapping(), () => cxt.error(false, {\n      discrError: types_1.DiscrError.Tag,\n      tag,\n      tagName\n    }));\n    cxt.ok(valid);\n    function validateMapping() {\n      const mapping = getMapping();\n      gen.if(false);\n      for (const tagValue in mapping) {\n        gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);\n        gen.assign(valid, applyTagSchema(mapping[tagValue]));\n      }\n      gen.else();\n      cxt.error(false, {\n        discrError: types_1.DiscrError.Mapping,\n        tag,\n        tagName\n      });\n      gen.endIf();\n    }\n    function applyTagSchema(schemaProp) {\n      const _valid = gen.name(\"valid\");\n      const schCxt = cxt.subschema({\n        keyword: \"oneOf\",\n        schemaProp\n      }, _valid);\n      cxt.mergeEvaluated(schCxt, codegen_1.Name);\n      return _valid;\n    }\n    function getMapping() {\n      var _a;\n      const oneOfMapping = {};\n      const topRequired = hasRequired(parentSchema);\n      let tagRequired = true;\n      for (let i = 0; i < oneOf.length; i++) {\n        let sch = oneOf[i];\n        if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {\n          const ref = sch.$ref;\n          sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, ref);\n          if (sch instanceof compile_1.SchemaEnv) sch = sch.schema;\n          if (sch === undefined) throw new ref_error_1.default(it.opts.uriResolver, it.baseId, ref);\n        }\n        const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];\n        if (typeof propSch != \"object\") {\n          throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have \"properties/${tagName}\"`);\n        }\n        tagRequired = tagRequired && (topRequired || hasRequired(sch));\n        addMappings(propSch, i);\n      }\n      if (!tagRequired) throw new Error(`discriminator: \"${tagName}\" must be required`);\n      return oneOfMapping;\n      function hasRequired({\n        required\n      }) {\n        return Array.isArray(required) && required.includes(tagName);\n      }\n      function addMappings(sch, i) {\n        if (sch.const) {\n          addMapping(sch.const, i);\n        } else if (sch.enum) {\n          for (const tagValue of sch.enum) {\n            addMapping(tagValue, i);\n          }\n        } else {\n          throw new Error(`discriminator: \"properties/${tagName}\" must have \"const\" or \"enum\"`);\n        }\n      }\n      function addMapping(tagValue, i) {\n        if (typeof tagValue != \"string\" || tagValue in oneOfMapping) {\n          throw new Error(`discriminator: \"${tagName}\" values must be unique strings`);\n        }\n        oneOfMapping[tagValue] = i;\n      }\n    }\n  }\n};\nexports.default = def;","map":{"version":3,"names":["codegen_1","require","types_1","compile_1","ref_error_1","util_1","error","message","params","discrError","tagName","DiscrError","Tag","tag","_","def","keyword","type","schemaType","code","cxt","gen","data","schema","parentSchema","it","oneOf","opts","discriminator","Error","propertyName","mapping","valid","let","const","getProperty","if","validateMapping","ok","getMapping","tagValue","elseIf","assign","applyTagSchema","else","Mapping","endIf","schemaProp","_valid","name","schCxt","subschema","mergeEvaluated","Name","oneOfMapping","topRequired","hasRequired","tagRequired","i","length","sch","$ref","schemaHasRulesButRef","self","RULES","ref","resolveRef","call","schemaEnv","root","baseId","SchemaEnv","undefined","default","uriResolver","propSch","_a","properties","addMappings","required","Array","isArray","includes","addMapping","enum","exports"],"sources":["C:\\Users\\p\\node_modules\\ajv\\lib\\vocabularies\\discriminator\\index.ts"],"sourcesContent":["import type {CodeKeywordDefinition, AnySchemaObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, getProperty, Name} from \"../../compile/codegen\"\nimport {DiscrError, DiscrErrorObj} from \"../discriminator/types\"\nimport {resolveRef, SchemaEnv} from \"../../compile\"\nimport MissingRefError from \"../../compile/ref_error\"\nimport {schemaHasRulesButRef} from \"../../compile/util\"\n\nexport type DiscriminatorError = DiscrErrorObj<DiscrError.Tag> | DiscrErrorObj<DiscrError.Mapping>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {discrError, tagName}}) =>\n    discrError === DiscrError.Tag\n      ? `tag \"${tagName}\" must be string`\n      : `value of tag \"${tagName}\" must be in oneOf`,\n  params: ({params: {discrError, tag, tagName}}) =>\n    _`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"discriminator\",\n  type: \"object\",\n  schemaType: \"object\",\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, schema, parentSchema, it} = cxt\n    const {oneOf} = parentSchema\n    if (!it.opts.discriminator) {\n      throw new Error(\"discriminator: requires discriminator option\")\n    }\n    const tagName = schema.propertyName\n    if (typeof tagName != \"string\") throw new Error(\"discriminator: requires propertyName\")\n    if (schema.mapping) throw new Error(\"discriminator: mapping is not supported\")\n    if (!oneOf) throw new Error(\"discriminator: requires oneOf keyword\")\n    const valid = gen.let(\"valid\", false)\n    const tag = gen.const(\"tag\", _`${data}${getProperty(tagName)}`)\n    gen.if(\n      _`typeof ${tag} == \"string\"`,\n      () => validateMapping(),\n      () => cxt.error(false, {discrError: DiscrError.Tag, tag, tagName})\n    )\n    cxt.ok(valid)\n\n    function validateMapping(): void {\n      const mapping = getMapping()\n      gen.if(false)\n      for (const tagValue in mapping) {\n        gen.elseIf(_`${tag} === ${tagValue}`)\n        gen.assign(valid, applyTagSchema(mapping[tagValue]))\n      }\n      gen.else()\n      cxt.error(false, {discrError: DiscrError.Mapping, tag, tagName})\n      gen.endIf()\n    }\n\n    function applyTagSchema(schemaProp?: number): Name {\n      const _valid = gen.name(\"valid\")\n      const schCxt = cxt.subschema({keyword: \"oneOf\", schemaProp}, _valid)\n      cxt.mergeEvaluated(schCxt, Name)\n      return _valid\n    }\n\n    function getMapping(): {[T in string]?: number} {\n      const oneOfMapping: {[T in string]?: number} = {}\n      const topRequired = hasRequired(parentSchema)\n      let tagRequired = true\n      for (let i = 0; i < oneOf.length; i++) {\n        let sch = oneOf[i]\n        if (sch?.$ref && !schemaHasRulesButRef(sch, it.self.RULES)) {\n          const ref = sch.$ref\n          sch = resolveRef.call(it.self, it.schemaEnv.root, it.baseId, ref)\n          if (sch instanceof SchemaEnv) sch = sch.schema\n          if (sch === undefined) throw new MissingRefError(it.opts.uriResolver, it.baseId, ref)\n        }\n        const propSch = sch?.properties?.[tagName]\n        if (typeof propSch != \"object\") {\n          throw new Error(\n            `discriminator: oneOf subschemas (or referenced schemas) must have \"properties/${tagName}\"`\n          )\n        }\n        tagRequired = tagRequired && (topRequired || hasRequired(sch))\n        addMappings(propSch, i)\n      }\n      if (!tagRequired) throw new Error(`discriminator: \"${tagName}\" must be required`)\n      return oneOfMapping\n\n      function hasRequired({required}: AnySchemaObject): boolean {\n        return Array.isArray(required) && required.includes(tagName)\n      }\n\n      function addMappings(sch: AnySchemaObject, i: number): void {\n        if (sch.const) {\n          addMapping(sch.const, i)\n        } else if (sch.enum) {\n          for (const tagValue of sch.enum) {\n            addMapping(tagValue, i)\n          }\n        } else {\n          throw new Error(`discriminator: \"properties/${tagName}\" must have \"const\" or \"enum\"`)\n        }\n      }\n\n      function addMapping(tagValue: unknown, i: number): void {\n        if (typeof tagValue != \"string\" || tagValue in oneOfMapping) {\n          throw new Error(`discriminator: \"${tagName}\" values must be unique strings`)\n        }\n        oneOfMapping[tagValue] = i\n      }\n    }\n  },\n}\n\nexport default def\n"],"mappings":";;;;;AAEA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AACA,MAAAE,SAAA,GAAAF,OAAA;AACA,MAAAG,WAAA,GAAAH,OAAA;AACA,MAAAI,MAAA,GAAAJ,OAAA;AAIA,MAAMK,KAAK,GAA2B;EACpCC,OAAO,EAAEA,CAAC;IAACC,MAAM,EAAE;MAACC,UAAU;MAAEC;IAAO;EAAC,CAAC,KACvCD,UAAU,KAAKP,OAAA,CAAAS,UAAU,CAACC,GAAG,GACzB,QAAQF,OAAO,kBAAkB,GACjC,iBAAiBA,OAAO,oBAAoB;EAClDF,MAAM,EAAEA,CAAC;IAACA,MAAM,EAAE;MAACC,UAAU;MAAEI,GAAG;MAAEH;IAAO;EAAC,CAAC,KAC3C,IAAAV,SAAA,CAAAc,CAAC,YAAWL,UAAU,UAAUC,OAAO,eAAeG,GAAG;CAC5D;AAED,MAAME,GAAG,GAA0B;EACjCC,OAAO,EAAE,eAAe;EACxBC,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE,QAAQ;EACpBZ,KAAK;EACLa,IAAIA,CAACC,GAAe;IAClB,MAAM;MAACC,GAAG;MAAEC,IAAI;MAAEC,MAAM;MAAEC,YAAY;MAAEC;IAAE,CAAC,GAAGL,GAAG;IACjD,MAAM;MAACM;IAAK,CAAC,GAAGF,YAAY;IAC5B,IAAI,CAACC,EAAE,CAACE,IAAI,CAACC,aAAa,EAAE;MAC1B,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;IACjE;IACA,MAAMnB,OAAO,GAAGa,MAAM,CAACO,YAAY;IACnC,IAAI,OAAOpB,OAAO,IAAI,QAAQ,EAAE,MAAM,IAAImB,KAAK,CAAC,sCAAsC,CAAC;IACvF,IAAIN,MAAM,CAACQ,OAAO,EAAE,MAAM,IAAIF,KAAK,CAAC,yCAAyC,CAAC;IAC9E,IAAI,CAACH,KAAK,EAAE,MAAM,IAAIG,KAAK,CAAC,uCAAuC,CAAC;IACpE,MAAMG,KAAK,GAAGX,GAAG,CAACY,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC;IACrC,MAAMpB,GAAG,GAAGQ,GAAG,CAACa,KAAK,CAAC,KAAK,EAAE,IAAAlC,SAAA,CAAAc,CAAC,IAAGQ,IAAI,GAAG,IAAAtB,SAAA,CAAAmC,WAAW,EAACzB,OAAO,CAAC,EAAE,CAAC;IAC/DW,GAAG,CAACe,EAAE,CACJ,IAAApC,SAAA,CAAAc,CAAC,WAAUD,GAAG,cAAc,EAC5B,MAAMwB,eAAe,EAAE,EACvB,MAAMjB,GAAG,CAACd,KAAK,CAAC,KAAK,EAAE;MAACG,UAAU,EAAEP,OAAA,CAAAS,UAAU,CAACC,GAAG;MAAEC,GAAG;MAAEH;IAAO,CAAC,CAAC,CACnE;IACDU,GAAG,CAACkB,EAAE,CAACN,KAAK,CAAC;IAEb,SAASK,eAAeA,CAAA;MACtB,MAAMN,OAAO,GAAGQ,UAAU,EAAE;MAC5BlB,GAAG,CAACe,EAAE,CAAC,KAAK,CAAC;MACb,KAAK,MAAMI,QAAQ,IAAIT,OAAO,EAAE;QAC9BV,GAAG,CAACoB,MAAM,CAAC,IAAAzC,SAAA,CAAAc,CAAC,IAAGD,GAAG,QAAQ2B,QAAQ,EAAE,CAAC;QACrCnB,GAAG,CAACqB,MAAM,CAACV,KAAK,EAAEW,cAAc,CAACZ,OAAO,CAACS,QAAQ,CAAC,CAAC,CAAC;MACtD;MACAnB,GAAG,CAACuB,IAAI,EAAE;MACVxB,GAAG,CAACd,KAAK,CAAC,KAAK,EAAE;QAACG,UAAU,EAAEP,OAAA,CAAAS,UAAU,CAACkC,OAAO;QAAEhC,GAAG;QAAEH;MAAO,CAAC,CAAC;MAChEW,GAAG,CAACyB,KAAK,EAAE;IACb;IAEA,SAASH,cAAcA,CAACI,UAAmB;MACzC,MAAMC,MAAM,GAAG3B,GAAG,CAAC4B,IAAI,CAAC,OAAO,CAAC;MAChC,MAAMC,MAAM,GAAG9B,GAAG,CAAC+B,SAAS,CAAC;QAACnC,OAAO,EAAE,OAAO;QAAE+B;MAAU,CAAC,EAAEC,MAAM,CAAC;MACpE5B,GAAG,CAACgC,cAAc,CAACF,MAAM,EAAElD,SAAA,CAAAqD,IAAI,CAAC;MAChC,OAAOL,MAAM;IACf;IAEA,SAAST,UAAUA,CAAA;;MACjB,MAAMe,YAAY,GAA6B,EAAE;MACjD,MAAMC,WAAW,GAAGC,WAAW,CAAChC,YAAY,CAAC;MAC7C,IAAIiC,WAAW,GAAG,IAAI;MACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhC,KAAK,CAACiC,MAAM,EAAED,CAAC,EAAE,EAAE;QACrC,IAAIE,GAAG,GAAGlC,KAAK,CAACgC,CAAC,CAAC;QAClB,IAAI,CAAAE,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,IAAI,KAAI,CAAC,IAAAxD,MAAA,CAAAyD,oBAAoB,EAACF,GAAG,EAAEnC,EAAE,CAACsC,IAAI,CAACC,KAAK,CAAC,EAAE;UAC1D,MAAMC,GAAG,GAAGL,GAAG,CAACC,IAAI;UACpBD,GAAG,GAAGzD,SAAA,CAAA+D,UAAU,CAACC,IAAI,CAAC1C,EAAE,CAACsC,IAAI,EAAEtC,EAAE,CAAC2C,SAAS,CAACC,IAAI,EAAE5C,EAAE,CAAC6C,MAAM,EAAEL,GAAG,CAAC;UACjE,IAAIL,GAAG,YAAYzD,SAAA,CAAAoE,SAAS,EAAEX,GAAG,GAAGA,GAAG,CAACrC,MAAM;UAC9C,IAAIqC,GAAG,KAAKY,SAAS,EAAE,MAAM,IAAIpE,WAAA,CAAAqE,OAAe,CAAChD,EAAE,CAACE,IAAI,CAAC+C,WAAW,EAAEjD,EAAE,CAAC6C,MAAM,EAAEL,GAAG,CAAC;QACvF;QACA,MAAMU,OAAO,GAAG,CAAAC,EAAA,GAAAhB,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEiB,UAAU,cAAAD,EAAA,uBAAAA,EAAA,CAAGlE,OAAO,CAAC;QAC1C,IAAI,OAAOiE,OAAO,IAAI,QAAQ,EAAE;UAC9B,MAAM,IAAI9C,KAAK,CACb,iFAAiFnB,OAAO,GAAG,CAC5F;QACH;QACA+C,WAAW,GAAGA,WAAW,KAAKF,WAAW,IAAIC,WAAW,CAACI,GAAG,CAAC,CAAC;QAC9DkB,WAAW,CAACH,OAAO,EAAEjB,CAAC,CAAC;MACzB;MACA,IAAI,CAACD,WAAW,EAAE,MAAM,IAAI5B,KAAK,CAAC,mBAAmBnB,OAAO,oBAAoB,CAAC;MACjF,OAAO4C,YAAY;MAEnB,SAASE,WAAWA,CAAC;QAACuB;MAAQ,CAAkB;QAC9C,OAAOC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,IAAIA,QAAQ,CAACG,QAAQ,CAACxE,OAAO,CAAC;MAC9D;MAEA,SAASoE,WAAWA,CAAClB,GAAoB,EAAEF,CAAS;QAClD,IAAIE,GAAG,CAAC1B,KAAK,EAAE;UACbiD,UAAU,CAACvB,GAAG,CAAC1B,KAAK,EAAEwB,CAAC,CAAC;QAC1B,CAAC,MAAM,IAAIE,GAAG,CAACwB,IAAI,EAAE;UACnB,KAAK,MAAM5C,QAAQ,IAAIoB,GAAG,CAACwB,IAAI,EAAE;YAC/BD,UAAU,CAAC3C,QAAQ,EAAEkB,CAAC,CAAC;UACzB;QACF,CAAC,MAAM;UACL,MAAM,IAAI7B,KAAK,CAAC,8BAA8BnB,OAAO,+BAA+B,CAAC;QACvF;MACF;MAEA,SAASyE,UAAUA,CAAC3C,QAAiB,EAAEkB,CAAS;QAC9C,IAAI,OAAOlB,QAAQ,IAAI,QAAQ,IAAIA,QAAQ,IAAIc,YAAY,EAAE;UAC3D,MAAM,IAAIzB,KAAK,CAAC,mBAAmBnB,OAAO,iCAAiC,CAAC;QAC9E;QACA4C,YAAY,CAACd,QAAQ,CAAC,GAAGkB,CAAC;MAC5B;IACF;EACF;CACD;AAED2B,OAAA,CAAAZ,OAAA,GAAe1D,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}